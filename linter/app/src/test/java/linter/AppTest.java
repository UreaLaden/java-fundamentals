/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test public void testFindMinVal(){
        int[] test1 = {66, 64, 58, 65, 71, 57, 60}; //57
        int expected1 = 57;
        int actual1 = App.findMinVal(test1);
        assertEquals("Should return smallest value",expected1,actual1);

        int[] test2 = {55, 54, 60, 53, 59, 57, 61}; //53
        int actual2 = App.findMinVal(test2);
        int expected2 = 53;
        assertEquals("Should return smallest value",expected2,actual2);

        int[] test3 = {57, 65, 65, 70, 72, 65, 51}; //51
        int actual3 = App.findMinVal(test3);
        int expected3 = 51;
        assertEquals("Should return smallest value",expected3,actual3);

        int[] test4 = {65, 56, 55, 52, 55, 62, 57}; //52
        int actual4 = App.findMinVal(test4);
        int expected4 = 52;
        assertEquals("Should return smallest value",expected4,actual4);
    }
    @Test public void testFindMaxVal(){
        int[] test1 = {66, 64, 58, 65, 71, 57, 60}; //71
        int expected1 = 71;
        int actual1 = App.findMaxVal(test1);
        assertEquals("Should return smallest value",expected1,actual1);

        int[] test2 = {55, 54, 60, 53, 59, 57, 61}; //61
        int actual2 = App.findMaxVal(test2);
        int expected2 = 61;
        assertEquals("Should return smallest value",expected2,actual2);

        int[] test3 = {57, 65, 65, 70, 72, 65, 51}; //72
        int actual3 = App.findMaxVal(test3);
        int expected3 = 72;
        assertEquals("Should return smallest value",expected3,actual3);

        int[] test4 = {65, 56, 55, 52, 55, 62, 57}; //65
        int actual4 = App.findMaxVal(test4);
        int expected4 = 65;
        assertEquals("Should return smallest value",expected4,actual4);
    }

    @Test public void testHighLow(){
        int[][] arr = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        String actual = App.displayHighLow(arr);
        String expected = (
                "High: " + 72 + "\nLow: " + 51 + "\n"
                + "Never saw temperature: " + 63 + "\n"
                + "Never saw temperature: " + 67 + "\n"
                + "Never saw temperature: " + 68 + "\n"
                + "Never saw temperature: " + 69 + "\n"
        );

        assertEquals("Should return Highs,Lows, and missing values: ",expected,actual);
    }

    @Test public void testTally(){
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        String expected = "Bush received the most votes";
        String actual = App.tally(votes);

        assertEquals("Should return Bush received the most votes: ",expected,actual);
    }

    @Test public void testJSReader(){
        ArrayList<String> targets = new ArrayList<>();
        String line1 = "Line 15: Missing semicolon";
        String line2 = "Line 32: Missing semicolon";
        String line3 = "Line 51: Missing semicolon";
        targets.add(line1);
        targets.add(line2);
        targets.add(line3);
        String filePath = "src/test/resources/gates.js";
        boolean containsTargets = App.readJSFile(filePath).containsAll(targets);
        assertTrue("Must contain all errors: ",containsTargets);
    }
}
